import React, { createContext, useContext, useEffect, useState, useRef, useCallback } from 'react';
import { fetchEventSource } from '@microsoft/fetch-event-source';
import { API_ENDPOINTS } from '../config/api';
import CustomNotification from '../components/CustomNotification';
import axiosInstance from '../utils/axiosInstance';

const NotificationContext = createContext();

export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotificationsÎäî NotificationProvider ÎÇ¥Î∂ÄÏóêÏÑúÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.');
  }
  return context;
};

export const NotificationProvider = ({ children }) => {
  const [notifications, setNotifications] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  const [showReadNotifications, setShowReadNotifications] = useState(true);
  const [activeNotification, setActiveNotification] = useState(null);
  
  const isInitializedRef = useRef(false);
  const isConnectingRef = useRef(false);
  const controllerRef = useRef(null);
  const reconnectTimeoutRef = useRef(null);

  // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Í≥ÑÏÇ∞
  const unreadCount = notifications.filter(notification => !notification.read).length;

  // Ïª§Ïä§ÌÖÄ ÏïåÎ¶º ÌëúÏãú Ìï®Ïàò
  const showNotification = (notification) => {
    console.log('üîî ÏïåÎ¶º ÏàòÏã†:', notification);

    if (!notification.title && !notification.content) {
      console.log('‚ö†Ô∏è ÏïåÎ¶º ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§');
      return;
    }

    // ÏïåÎ¶º ÏïÑÏù¥ÏΩòÏùò ÏúÑÏπòÎ•º Ï∞æÏïÑÏÑú ÏïåÎ¶º ÏúÑÏπò Í≥ÑÏÇ∞
    const notificationIcon = document.querySelector('.notification-icon');
    if (notificationIcon) {
      const rect = notificationIcon.getBoundingClientRect();
      const notificationElement = document.querySelector('.custom-notification');
      if (notificationElement) {
        notificationElement.style.top = `${rect.bottom + 10}px`;
        notificationElement.style.right = `${window.innerWidth - rect.right}px`;
      }
    }

    setActiveNotification(notification);
    
    // 5Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú ÏïåÎ¶º Îã´Í∏∞
    setTimeout(() => {
      setActiveNotification(null);
    }, 5000);
  };

  // ÏïåÎ¶º Îã´Í∏∞ Ìï®Ïàò
  const closeNotification = () => {
    setActiveNotification(null);
  };

  // SSE Ïó∞Í≤∞ Ìï®Ïàò
  const connectSSE = useCallback(async () => {
    if (isConnectingRef.current || isConnected) {
      console.log('SSE Ïù¥ÎØ∏ Ïó∞Í≤∞ Ï§ëÏù¥Í±∞ÎÇò Ïó∞Í≤∞Îê®');
      return;
    }

    try {
      isConnectingRef.current = true;
      console.log('SSE Ïó∞Í≤∞ ÏãúÎèÑ...');

      if (controllerRef.current) {
        console.log('Ïù¥Ï†Ñ SSE Ïó∞Í≤∞ Ï¢ÖÎ£å');
        controllerRef.current.abort();
      }

      const controller = new AbortController();
      controllerRef.current = controller;

      await fetchEventSource(API_ENDPOINTS.NOTIFICATIONS.SUBSCRIBE, {
        signal: controller.signal,
        method: 'GET',
        keepalive: true,
        openWhenHidden: true,
        credentials: 'include',
        onopen(response) {
          console.log('SSE onopen Ìò∏Ï∂ú:', {
            status: response.status,
            contentType: response.headers.get('content-type')
          });

          if (response.ok && response.headers.get('content-type') === 'text/event-stream') {
            console.log('SSE Ïó∞Í≤∞ ÏÑ±Í≥µ!');
            setIsConnected(true);
            isConnectingRef.current = false;
            isInitializedRef.current = true;
            return;
          }
          console.error('SSE Ïó∞Í≤∞ Ïã§Ìå®');
          throw new Error('SSE Ïó∞Í≤∞ Ïã§Ìå®');
        },
        onmessage(event) {
          console.log('SSE Î©îÏãúÏßÄ ÏàòÏã†:', event.data);

          if (event.data === "connected") {
            console.log('SSE Ïó∞Í≤∞ ÌôïÏù∏ Î©îÏãúÏßÄ ÏàòÏã†');
            return;
          }

          try {
            const notification = JSON.parse(event.data);
            console.log('ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ ÌååÏã± ÏÑ±Í≥µ:', notification);
            setNotifications(prev => [notification, ...prev]);
            showNotification(notification);
          } catch (error) {
            console.error('ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
          }
        },
        onerror(error) {
          console.error('SSE ÏóêÎü¨:', error);
          setIsConnected(false);
          isConnectingRef.current = false;
          controller.abort();
          
          if (reconnectTimeoutRef.current) {
            clearTimeout(reconnectTimeoutRef.current);
          }
          reconnectTimeoutRef.current = setTimeout(() => {
            if (!isInitializedRef.current) {
              console.log('SSE Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...');
              connectSSE();
            }
          }, 5000);
        },
        onclose() {
          console.log('SSE Ïó∞Í≤∞ Ï¢ÖÎ£å');
          setIsConnected(false);
          isConnectingRef.current = false;
        }
      });
    } catch (error) {
      console.error('SSE Ïó∞Í≤∞ ÏóêÎü¨:', error);
      setIsConnected(false);
      isConnectingRef.current = false;
    }
  }, [isConnected]);

  // ÏïåÎ¶º Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchNotifications = async () => {
    try {
      const { data } = await axiosInstance.get(API_ENDPOINTS.NOTIFICATIONS.LIST);
      setNotifications(data);
    } catch (error) {
      console.error('ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    }
  };

  // Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    // Ï¥àÍ∏∞ ÏïåÎ¶º Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    fetchNotifications();

    const initialize = async () => {
      if (!isInitializedRef.current && !isConnectingRef.current) {
        // SSE Ïó∞Í≤∞
        await connectSSE();
      }
    };

    initialize();

    return () => {
      if (controllerRef.current) {
        controllerRef.current.abort();
        controllerRef.current = null;
      }
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      setIsConnected(false);
      isInitializedRef.current = false;
      isConnectingRef.current = false;
    };
  }, []);

  // ÏïåÎ¶º ÏùΩÏùå ÏÉÅÌÉú Î≥ÄÍ≤Ω
  const markAsRead = async (notificationId) => {
    try {
      await axiosInstance.patch(`${API_ENDPOINTS.NOTIFICATIONS.LIST}/${notificationId}/read`, {
        isRead: true
      });
      
      setNotifications(prev =>
        prev.map(notification =>
          notification.id === notificationId
            ? { ...notification, read: true }
            : notification
        )
      );
    } catch (error) {
      console.error('ÏïåÎ¶º ÏùΩÏùå ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
    }
  };

  // Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAllAsRead = async () => {
    try {
      await axiosInstance.patch(API_ENDPOINTS.NOTIFICATIONS.READ);
      setNotifications(prev => 
        prev.map(notification => ({ ...notification, read: true }))
      );
    } catch (error) {
      console.error('Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
    }
  };

  // ÏïåÎ¶º ÏÉÅÌÉúÏóê Îî∞Î•∏ ÌïÑÌÑ∞ÎßÅ
  const getFilteredNotifications = () => {
    return notifications.filter(notification => showReadNotifications || !notification.read);
  };

  // SSE Ïó∞Í≤∞ Ìï¥Ï†ú Ìï®Ïàò
  const disconnectSSE = useCallback(() => {
    console.log('SSE Ïó∞Í≤∞ Ìï¥Ï†ú ÏãúÎèÑ');
    if (controllerRef.current) {
      controllerRef.current.abort();
      controllerRef.current = null;
    }
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }
    setIsConnected(false);
    isInitializedRef.current = false;
    isConnectingRef.current = false;
  }, []);

  const value = {
    notifications,
    isConnected,
    unreadCount,
    markAsRead,
    markAllAsRead,
    getFilteredNotifications,
    showReadNotifications,
    setShowReadNotifications,
    disconnectSSE
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
      {activeNotification && (
        <CustomNotification
          notification={activeNotification}
          onClose={closeNotification}
        />
      )}
    </NotificationContext.Provider>
  );
}; 
}; 